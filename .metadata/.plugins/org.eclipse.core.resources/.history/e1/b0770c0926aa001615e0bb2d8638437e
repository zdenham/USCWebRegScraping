package Scraping;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

public class DataFiller {
	private final static String addBuilding = "INSERT INTO Building(CODE) VALUES(?)";
	private final static String addCourse = "INSERT INTO Course(NAME, CODE) VALUES(?,?)";
	private final static String addClassroom = "INSERT INTO Classroom(BUILDING, ROOMNUMBER) VALUES(?,?)";
	private final static String addClassSession = "INSERT INTO ClassSession(DAY, STARTTIME, ENDTIME, ROOM) VALUES(?,?,?,?)";
	private final static String getBuilding = "SELECT * FROM Building WHERE CODE=?";
	private final static String getCourse = "SELECT * FROM Course WHERE CODE=?";
	private final static String getRoom = "SELECT * FROM Classroom WHERE number=? AND building=?";
	
	private Connection con = null;
	private Vector<String> buildings = new Vector<String>();
	private Vector<Classroom> classrooms = new Vector<Classroom>();
	private Vector<Course> courses = new Vector<Course>();
 	private Vector<ClassSession> classSessions = new Vector<ClassSession>();
 	
 	public DataFiller(){
 		
 	}
 	
 	public void connect() {
		try {
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/StudySession?user=root&password=jq6wqq&useSSL=false");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
 	
 	public void getInformation(SectionSessions sessions){
 		Vector<ClassSession> classSessions = sessions.getClasses();
 		
 		for(int i = 0; i < classSessions.size(); i++){
 			parseSession(classSessions.get(i));
 		}
 	}
 	
 	private void parseSession(ClassSession session){
 		Classroom myClassroom = new Classroom(session.getBuilding(), session.getRoom());
 		
 		Course myCourse = new Course(session.getName(), session.getCode());
 		
 		if(!doesClassroomVectorContain(myClassroom, classrooms)){
 			classrooms.add(myClassroom);
 		}
 		
 		if(!doesContain(session.getBuilding(), buildings)){
 			buildings.add(session.getBuilding());
 		}
 		
 		if(!doesCourseVectorContain(myCourse, this.courses)){
 			this.courses.add(myCourse);
 		}
 		
 		classSessions.add(session);
 	}
 	
 	private boolean doesContain(String a, Vector<String> b){
 		for(int i = 0; i < b.size(); i++){
 			if(b.get(i).compareTo(a) == 0){
 				return true;
 			}
 		}
 		return false;
 	}
 	
 	private boolean doesCourseVectorContain(Course a, Vector<Course> b){
 		for(int i = 0; i < b.size(); i++){
 			if(b.get(i).getCode().compareTo(a.getCode()) == 0 && b.get(i).getName().compareTo(a.getName()) == 0){
 				return true;
 			}
 		}
 		return false;
 	}
 	
 	private boolean doesClassroomVectorContain(Classroom a, Vector<Classroom> b){
 		for(int i = 0; i < b.size(); i++){
 			if(b.get(i).getRoomNumber().compareTo(a.getRoomNumber()) == 0 && b.get(i).getBuilding().compareTo(a.getBuilding()) == 0){
 				return true;
 			}
 		}
 		return false;
 	}
 	
 	public void fillDataBase() throws SQLException{
 		
 		//fill database with buildings
 		for(int i = 0; i < buildings.size(); i++){
			PreparedStatement ps = con.prepareStatement(addBuilding);
			ps.setString(1, buildings.get(i));
			ps.executeUpdate();
 		}
 		
 		//fill database with courses
 		for(int i = 0; i < courses.size(); i++){
 			PreparedStatement ps = con.prepareStatement(addCourse);
 			ps.setString(1, courses.get(i).getName());
 			ps.setString(2, courses.get(i).getCode());
 			ps.executeUpdate();
 		}
 		
 		//fill database with classrooms
 		for(int i = 0; i < classrooms.size(); i++){
 			PreparedStatement ps = con.preparedStatement(addClassroom);
 		}
 	}

	
}
